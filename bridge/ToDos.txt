## ToDos for the Bridge ##

### User DB ###

- initialise an empty database with 2 generic users (admin/secret, display/secret)
- force user after first login via REST to change password
- offer ability to register further users
- store random (CSPRNG) salts together with hashes (PBKDF2)
- login returns JWT token

### Websocket Verbindung ###

- use watershed to open a second connection for events
- use EventEmitter to generate events from serial info

### Routes ###

- GET /car - list all cars
- POST /car - import a complete car list
- GET /car/:id - get this one car
- POST /car/:id - create a new car
- PUT /car/:id - update an existing car
- DEL /car/:id - delete a car

- GET /race - list all races
- POST /race/:id - create a new race
- GET /race/leaderboard/:id - get the leaderboard for this race
- GET /race/highscores/:id - get the highscores for this race

- GET /raceconfig - get all race configurations
- GET /raceconfig/:id - get a specific race configuration
- POST /raceconfig/:id - create a specific race configuration

- GET /heat/:id - get a specific heat
- GET /heat/current - get the current heat
- GET /heat/next - get the next heat
- PUT /heat/current/:id - mark this heat as current
- PUT /heat/next/:id - mark this heat as next
- PUT /heat/init/:id - initialize this heat
- PUT /heat/go/:id - start this heat

- GET /track/highscores - get the overall highscores

- POST /user/:id - create a new user
- POST /user/login - login as a user get JWT token
- PUT /user/:id - update user credentials and properties

- GET /ping - keepalive message
